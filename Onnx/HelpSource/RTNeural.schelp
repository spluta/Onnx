TITLE:: RTNeural
summary:: Amp and Pedal Neural Emulator
categories:: UGens>NeuralProcessing


DESCRIPTION::
This is a SuperCollider UGen which uses Jatin Chowdhury's RTNeural inference engine to load and run tensorflow neural network models. See the RTNeural github page (https://github.com/jatinchowdhury18/RTNeural) for neural network layers supported.  

CLASSMETHODS::

METHOD:: ar
RTNeural models can operate at audio rate or control rate. At audio rate the input array should be audio rate. At control rate, the input array should be control rate.

ARGUMENT:: input_array
an array of audio inputs - size of the array needs to match the size of the input layer of the provided neural network model

ARGUMENT:: num_outputs
the number of audio outputs for the UGen. this number must match the number of outputs of the provided neural network model

ARGUMENT:: id
each RTNeural UGen in a Synth needs a unique id

ARGUMENT:: bypass
bypass the effect - audio goes straight out with no CPU use by the neural network

ARGUMENT:: sample_rate
the default setting is -1, which means this is bypassed. however, some audio effects are trained on audio at a sample. if the provided model is trained a specific sample rate, provide that sample rate here. then the incoming signals will be resampled to the correct sample rate before going through the neural network and sampled back after inference.

METHOD:: kr
RTNeural models can operate at audio rate or control rate. At audio rate the input array should be audio rate. At control rate, the input array should be control rate.

ARGUMENT:: input_array
an array of control inputs - size of the array needs to match the size of the input layer of the provided neural network model

ARGUMENT:: num_outputs
the number of control outputs for the UGen. this number must match the number of outputs of the provided neural network model

ARGUMENT:: id
each RTNeural UGen in a Synth needs a unique id

ARGUMENT:: bypass
bypass the effect - input goes straight out with no CPU use by the neural network

ARGUMENT:: sample_rate
the default setting is -1. i'm not sure why you would change this for a control rate model


METHOD:: loadModel
loads pretrained RTNeural models and weights into the RTNeural C++ library from a json file. the json file must be saved in the correct format. files can be saved in the correct format using the 'save_model' function from the provided 'model_utils.py' file. see the python examples.

ARGUMENT:: synth
the synth where the UGen exists

ARGUMENT:: id
the id for the UGen where you are loading the model

ARGUMENT:: path
path to the json file training


EXAMPLES::

code::
//the gru model from the chowdsp centaur pedal is provided in the /python folder
//this only models the gain stage of the centaur guitar pedel, not the entire pedal

SynthDef('rtneural_centaur', {
    var rtn, in = SinOsc.ar(MouseY.kr(100, 2000));
    //centaur takes 3 inputs - audio, gain, and 1/sample_rate
    in = [in, K2A.ar(MouseX.kr), K2A.ar(1/SampleRate.ir)];
    rtn = RTNeural.ar(in, 1, 'this_one', \bypass.kr(0));
    Out.ar(0,
        rtn.dup*0.2
    );
}).load(s);

~synth = Synth('rtneural_centaur');

//load the model
~path = PathName(RTNeural.filenameSymbol.asString).pathOnly++"python/";

//the standard training seems to have an issue at low gain
RTNeural.loadModel(~synth, \this_one, ~path++"centaur/centaur.json");
//the large model clears up the issue in the low register
RTNeural.loadModel(~synth, \this_one, ~path++"centaur/centaur_large.json");

Stethoscope(s, 2);

//the neural models that process the neural hysteresis mode on the Chow Tape Model

SynthDef('rtneural_hysteresis', {
    var rtn, in = SinOsc.ar(MouseY.kr(100, 2000));
    //centaur takes 3 inputs - audio, gain, and 1/sample_rate
    in = [in, K2A.ar(MouseX.kr), K2A.ar(1/SampleRate.ir)];
    rtn = RTNeural.ar(in, 1, 'this_one', \bypass.kr(0));
    Out.ar(0,
        rtn.dup*0.2
    );
}).add;

~synth = Synth('rtneural_hysteresis');

~path = PathName(RTNeural.filenameSymbol.asString).pathOnly++"python/";
RTNeural.loadModel(~synth, \this_one, ~path++"STN_Models/hyst_width_50.json");

//a multilayer perceptron neural network that has been trained on variable wavetable oscillator
//i am not saying this is a good use of a neural network

//
(
    SynthDef('rtneural_osc', {
        //the network takes two inputs: 1 - phase of the oscillator and 2 - which oscillator type (0=sine, 0.33=tri, 0.66=square, 1=saw)
        var in = LFSaw.ar(MouseX.kr(50,500)).range(0,1);
        var mouse = K2A.ar(MouseY.kr);

        var synth = RTNeural.ar([in,mouse], 1, 'this_one', \bypass.kr(0))*0.5;
        Out.ar(0, synth.dup);
    }).load(s);
)

//make the synth
~synth = Synth('rtneural_osc');

//see the ramp wave
Stethoscope(s, 2);

//load the model
~path = PathName(RTNeural.filenameSymbol.asString).pathOnly++"python/";
RTNeural.loadModel(~synth, \this_one, ~path++"mlp_4osc_model_122.json");



::
